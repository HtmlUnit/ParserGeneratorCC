/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */

${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class SimpleCharStream
#if !STATIC
implements CharStream
#fi
{
/** Whether parser is static. */
  public static final boolean staticFlag = ${STATIC};
  ${PREFIX}int bufsize;
  ${PREFIX}int available;
  ${PREFIX}int tokenBegin;
/** Position in buffer. */
  ${PREFIX}public int bufpos = -1;
#if KEEP_LINE_COLUMN
  ${PREFIX}protected[] int bufline;
  ${PREFIX}protected[] int bufcolumn;

  ${PREFIX}protected int column = 0;
  ${PREFIX}protected int line = 1;

  ${PREFIX}protected boolean prevCharIsCR = false;
  ${PREFIX}protected boolean prevCharIsLF = false;
#fi

  ${PREFIX}protected Provider inputStream;

  ${PREFIX}protected char[] buffer;
  ${PREFIX}protected int maxNextCharInd = 0;
  ${PREFIX}protected int inBuf = 0;
  ${PREFIX}private int tabSize = 1;
#if KEEP_LINE_COLUMN
  ${PREFIX}protected boolean trackLineColumn = true;
#else
  ${PREFIX}protected final boolean trackLineColumn = false;
#fi

  ${PREFIX}public void setTabSize(int i) { 
    tabSize = i;
  }
  ${PREFIX}public int getTabSize() { 
    return tabSize;
  }

  ${PREFIX}protected void expandBuff(boolean wrapAround)
  {
    char[] newbuffer = new char[bufsize + 2048];
#if KEEP_LINE_COLUMN
    int newbufline[] = new int[bufsize + 2048];
    int newbufcolumn[] = new int[bufsize + 2048];
#fi

    try
    {
      if (wrapAround)
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
        buffer = newbuffer;
#if KEEP_LINE_COLUMN

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
        bufcolumn = newbufcolumn;
#fi

        bufpos += (bufsize - tokenBegin);
        maxNextCharInd = bufpos;
      }
      else
      {
        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
        buffer = newbuffer;
#if KEEP_LINE_COLUMN

        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
        bufline = newbufline;

        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
        bufcolumn = newbufcolumn;
#fi

        bufpos -= tokenBegin;
        maxNextCharInd = bufpos;
      }
    }
    catch (final Exception ex)
    {
#if AT_LEAST_JDK4
      throw new IllegalStateException(ex);
#else
      throw new IllegalStateException(ex.getMessage());
#fi
    }


    bufsize += 2048;
    available = bufsize;
    tokenBegin = 0;
  }

  ${PREFIX}protected void fillBuff() throws java.io.IOException
  {
    if (maxNextCharInd == available)
    {
      if (available == bufsize)
      {
        if (tokenBegin > 2048)
        {
          bufpos = maxNextCharInd = 0;
          available = tokenBegin;
        }
        else
        if (tokenBegin < 0)
          bufpos = maxNextCharInd = 0;
        else
          expandBuff(false);
      }
      else
      if (available > tokenBegin)
        available = bufsize;
      else
      if ((tokenBegin - available) < 2048)
        expandBuff(true);
      else
        available = tokenBegin;
    }

    try {
      int i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd);
      if (i == -1)
      {
        inputStream.close();
        throw new java.io.IOException();
      }
      maxNextCharInd += i;
      return;
    }
    catch(final java.io.IOException e) {
      --bufpos;
      backup(0);
      if (tokenBegin == -1)
        tokenBegin = bufpos;
      throw e;
    }
  }

/** Start. */
  ${PREFIX}public char beginToken() throws java.io.IOException
  {
    tokenBegin = -1;
    char c = readChar();
    tokenBegin = bufpos;

    return c;
  }
#if KEEP_LINE_COLUMN

  ${PREFIX}protected void updateLineColumn(char c)
  {
    column++;

    if (prevCharIsLF)
    {
      prevCharIsLF = false;
      column = 1;
      line++;
    }
    else
      if (prevCharIsCR)
      {
        prevCharIsCR = false;
        if (c == '\n')
          prevCharIsLF = true;
        else 
        {
          column = 1;
          line++;
        }
    }

    switch (c)
    {
      case '\r' :
        prevCharIsCR = true;
        break;
      case '\n' :
        prevCharIsLF = true;
        break;
      case '\t' :
        column--;
        column += (tabSize - (column % tabSize));
        break;
      default :
        break;
    }

    bufline[bufpos] = line;
    bufcolumn[bufpos] = column;
  }
#fi

/** Read a character. */
  ${PREFIX}public char readChar() throws java.io.IOException
  {
    if (inBuf > 0)
    {
      --inBuf;

      if (++bufpos == bufsize)
        bufpos = 0;

      return buffer[bufpos];
    }

    ++bufpos;
    if (bufpos >= maxNextCharInd)
      fillBuff();

    char c = buffer[bufpos];

#if KEEP_LINE_COLUMN
    if (trackLineColumn)
      updateLineColumn(c);
#fi
    return c;
  }

  ${PREFIX}public int getEndColumn() {
#if KEEP_LINE_COLUMN
    return bufcolumn[bufpos];
#else
    return -1;
#fi
  }

  ${PREFIX}public int getEndLine() {
#if KEEP_LINE_COLUMN
     return bufline[bufpos];
#else
    return -1;
#fi
  }

  ${PREFIX}public int getBeginColumn() {
#if KEEP_LINE_COLUMN
    return bufcolumn[tokenBegin];
#else
    return -1;
#fi
  }

  ${PREFIX}public int getBeginLine() {
#if KEEP_LINE_COLUMN
    return bufline[tokenBegin];
#else
    return -1;
#fi
  }

  /** 
   * Retreat.
   * @param amount Number of chars to retreat 
   */
  ${PREFIX}public void backup(final int amount) {
    inBuf += amount;
    bufpos -= amount;
    if (bufpos < 0)
      bufpos += bufsize;
  }

  /** Constructor. */
  public SimpleCharStream(final Provider dstream,
                          final int startline,
                          final int startcolumn,
                          final int buffersize)
  {
#if STATIC
    if (inputStream != null)
      throw new IllegalStateException("\n   ERROR: Second call to the constructor of a static SimpleCharStream.\n" +
      "       You must either use reInit() or set the JavaCC option STATIC to false\n" +
      "       during the generation of this class.");
#fi
    inputStream = dstream;
#if KEEP_LINE_COLUMN
    line = startline;
    column = startcolumn - 1;
#fi

    bufsize = buffersize;
    available = buffersize;
    buffer = new char[buffersize];
#if KEEP_LINE_COLUMN
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
#fi
  }

  /** Constructor. */
  public SimpleCharStream(final Provider dstream,
                          final int startline,
                          final int startcolumn)
  {
    this(dstream, startline, startcolumn, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(final Provider dstream)
  {
    this(dstream, 1, 1, 4096);
  }

  /** Reinitialise. */
  public void reInit(Provider dstream, int startline,
  int startcolumn, int buffersize)
  {
    inputStream = dstream;
#if KEEP_LINE_COLUMN
    line = startline;
    column = startcolumn - 1;
#fi

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
#if KEEP_LINE_COLUMN
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
#fi
    }
#if KEEP_LINE_COLUMN
    prevCharIsLF = prevCharIsCR = false;
#fi
    tokenBegin = inBuf = maxNextCharInd = 0;
    bufpos = -1;
  }

  /** Reinitialise. */
  public void reInit(Provider dstream, int startline,
                     int startcolumn)
  {
    reInit(dstream, startline, startcolumn, 4096);
  }

  /** Reinitialise. */
  public void reInit(Provider dstream)
  {
    reInit(dstream, 1, 1, 4096);
  }
 

  /** Get token literal value. */
  ${PREFIX}public String GetImage()
  {
    if (bufpos >= tokenBegin)
      return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
    return new String(buffer, tokenBegin, bufsize - tokenBegin) +
           new String(buffer, 0, bufpos + 1);
  }

  /** Get the suffix. */
  ${PREFIX}public char[] getSuffix(int len)
  {
    char[] ret = new char[len];

    if ((bufpos + 1) >= len)
      System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
    else
    {
      System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                        len - bufpos - 1);
      System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
    }

    return ret;
  }

  /** Reset buffer when finished. */
  ${PREFIX}public void done()
  {
    buffer = null;
#if KEEP_LINE_COLUMN
    bufline = null;
    bufcolumn = null;
#fi
  }
#if KEEP_LINE_COLUMN

  /**
   * Method to adjust line and column numbers for the start of a token.
   */
  ${PREFIX}public void adjustBeginLineColumn(int newLine, int newCol)
  {
    int start = tokenBegin;
    int len;

    if (bufpos >= tokenBegin)
    {
      len = bufpos - tokenBegin + inBuf + 1;
    }
    else
    {
      len = bufsize - tokenBegin + bufpos + 1 + inBuf;
    }

    int i = 0, j = 0, k = 0;
    int nextColDiff = 0, columnDiff = 0;

    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
    {
      bufline[j] = newLine;
      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
      bufcolumn[j] = newCol + columnDiff;
      columnDiff = nextColDiff;
      i++;
    }

    if (i < len)
    {
      bufline[j] = newLine++;
      bufcolumn[j] = newCol + columnDiff;

      while (i++ < len)
      {
        if (bufline[j = start % bufsize] != bufline[++start % bufsize])
          bufline[j] = newLine++;
        else
          bufline[j] = newLine;
      }
    }

    line = bufline[j];
    column = bufcolumn[j];
  }

  ${PREFIX}public void setTrackLineColumn(final boolean tlc) { 
    trackLineColumn = tlc;
  }
  
  ${PREFIX}public boolean getTrackLineColumn() { 
    return trackLineColumn;
  }
#fi
}
